{"ast":null,"code":"const API_URL = `${process.env.REACT_APP_API_URL}/segmentations`;\nexport const fetchSegmentationByImageId = async id => {\n  try {\n    const response = await fetch(`${API_URL}/image/${id}`);\n    const data = await response.json();\n    return data[\"segmentation\"];\n  } catch (error) {\n    console.error('Error fetching segmentation:', error);\n    throw error;\n  }\n};\nexport const fetchSegmentationsInTesting = async () => {\n  try {\n    const response = await fetch(`${API_URL}/testing`);\n    const data = await response.json();\n    return data[\"testingSegmentations\"];\n  } catch (error) {\n    console.error('Error fetching testing segmentations:', error);\n    throw error;\n  }\n};\nexport const fetchSegmentationsInTraining = async () => {\n  try {\n    const response = await fetch(`${API_URL}/training`);\n    const data = await response.json();\n    return data[\"trainingSegmentations\"];\n  } catch (error) {\n    console.error('Error fetching testing segmentations:', error);\n    throw error;\n  }\n};\nexport const fetchSegmentationsInValidation = async () => {\n  try {\n    const response = await fetch(`${API_URL}/validation`);\n    const data = await response.json();\n    return data[\"validationSegmentations\"];\n  } catch (error) {\n    console.error('Error fetching testing segmentations:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchSegmentationByImageId","id","response","fetch","data","json","error","console","fetchSegmentationsInTesting","fetchSegmentationsInTraining","fetchSegmentationsInValidation"],"sources":["/Users/halisia/Desktop/Developpement/Projects/organo-id/client/src/services/segmentation.service.js"],"sourcesContent":["\nconst API_URL = `${process.env.REACT_APP_API_URL}/segmentations`;\n\nexport const fetchSegmentationByImageId = async (id) => {\n    try {\n        const response = await fetch(`${API_URL}/image/${id}`);\n        const data = await response.json();\n        return data[\"segmentation\"];\n    } catch (error) {\n        console.error('Error fetching segmentation:', error);\n        throw error;\n    }\n};\n\nexport const fetchSegmentationsInTesting = async () => {\n    try {\n        const response = await fetch(`${API_URL}/testing`);\n        const data = await response.json();\n        \n        return data[\"testingSegmentations\"];\n    } catch (error) {\n        console.error('Error fetching testing segmentations:', error);\n        throw error;\n    }\n};\n\nexport const fetchSegmentationsInTraining = async () => {\n    try {\n        const response = await fetch(`${API_URL}/training`);\n        const data = await response.json();\n        \n        return data[\"trainingSegmentations\"];\n    } catch (error) {\n        console.error('Error fetching testing segmentations:', error);\n        throw error;\n    }\n};\n\nexport const fetchSegmentationsInValidation = async () => {\n    try {\n        const response = await fetch(`${API_URL}/validation`);\n        const data = await response.json();\n        \n        return data[\"validationSegmentations\"];\n    } catch (error) {\n        console.error('Error fetching testing segmentations:', error);\n        throw error;\n    }\n};\n"],"mappings":"AACA,MAAMA,OAAO,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,gBAAgB;AAEhE,OAAO,MAAMC,0BAA0B,GAAG,MAAOC,EAAE,IAAK;EACpD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,UAAUK,EAAE,EAAE,CAAC;IACtD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,cAAc,CAAC;EAC/B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,2BAA2B,GAAG,MAAAA,CAAA,KAAY;EACnD,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,UAAU,CAAC;IAClD,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,OAAOD,IAAI,CAAC,sBAAsB,CAAC;EACvC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,4BAA4B,GAAG,MAAAA,CAAA,KAAY;EACpD,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,WAAW,CAAC;IACnD,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,OAAOD,IAAI,CAAC,uBAAuB,CAAC;EACxC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMI,8BAA8B,GAAG,MAAAA,CAAA,KAAY;EACtD,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,CAAC;IACrD,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,OAAOD,IAAI,CAAC,yBAAyB,CAAC;EAC1C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}